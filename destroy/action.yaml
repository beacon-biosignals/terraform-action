# Deleting Terraform on state alone isn't always possible:
# https://github.com/hashicorp/terraform/issues/5425#issuecomment-194395754
---
name: Terraform Destroy
description: Perform a Terraform destroy using the provided inputs.
branding:
  icon: file-minus
  color: red
inputs:
  dir:
    description: The working directory containing the Terraform project.
    default: "."
  workspace:
    description: Name of the Terraform workspace to use during the operation.
    required: false
  lock:
    description: Boolean which specifies if a state lock is to be held during the operation.
    default: "true"
  variables:
    description: >-
      YAML or JSON object containing key/value pairs specifying input values. Any variables
      specified here must be declared by the Terraform project or otherwise an error will
      be thrown.
    required: false
  optional-variables:
    description: >-
      YAML or JSON object containing key/value pairs of input values which will be ignored
      if the Terraform project doesn't declare them. Typically, users should prefer using
      `variables` instead.
    required: false
  log-level:
    description: >-
      Set the verbosity of the Terraform logs: TRACE, DEBUG, INFO, WARN, or ERROR.
    default: "INFO"
    required: false
  token:
    description: The GitHub PAT token to use for accessing remote Terraform modules stored on GitHub.
    default: ${{ github.token }}
runs:
  using: composite
  steps:
    - name: Terraform variables
      id: variables
      shell: bash
      run: |
        # Terraform variables
        set -eo pipefail
        required_vars_json="$(yq '. // {}' -o json <<<"${variables}" | jq -r 'if type == "object" then . else error("\"variables\" root element must be an object") end')"
        optional_vars_json="$(yq '. // {}' -o json <<<"${optional_variables}" | jq -r 'if type == "object" then . else error("\"optional-variables\" root element must be an object") end')"

        # Variables may only be defined once in either of the input variable maps
        duplicate_str="$(jq -nr --argjson req "$required_vars_json" --argjson opt "$optional_vars_json" '($req | keys) - (($req | keys) - ($opt | keys)) | join(", ")')"
        if [[ -n "$duplicate_str" ]]; then
            echo "Input variables must not be defined in both \`variables\` and \`optional-variables\`. Duplicates found: $duplicate_str" >&2
            exit 1
        fi

        if [[ ! "$log_level" =~ ^(TRACE|DEBUG|INFO|WARN|ERROR)$ ]]; then
            echo "Input variable \`log-level\` must be one of: TRACE, DEBUG, INFO, WARN, or ERROR." >&2
            exit 1
        fi

        # Specify our multiline output using GH action flavored heredocs
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        {
            echo "required-json<<EOF"
            jq <<<"${required_vars_json}"
            echo "EOF"

            echo "optional-json<<EOF"
            jq <<<"${optional_vars_json}"
            echo "EOF"
        } | tee -a "$GITHUB_OUTPUT"
      env:
        variables: ${{ inputs.variables }}
        optional_variables: ${{ inputs.optional-variables }}
        log_level: ${{ inputs.log-level }}
    - name: Terraform destroy
      shell: bash
      run: |
        # Destroy
        set -eo pipefail

        # Convert JSON variables into CLI flags or environmental variables. We'll remove
        # entries with `null` values as we cannot pass those into Terraform:
        # https://github.com/hashicorp/terraform/issues/29078
        #
        # Prefer using flags where possible as these will error when they define a variable
        # which the Terraform project does not accept (possibly a typo). In some scenarios,
        # such as deprecations, it's nice to use environmental variables which when
        # undeclared in the project do not produce these errors.
        # https://github.com/hashicorp/terraform/issues/22004#issuecomment-783757089
        #
        # TODO: Add tests for JSON lists and values with spaces. If you aren't very careful can end up
        # with `'-var=foo="a b"'` which looks like a positional argument to terraform.
        tf_var_flags=()
        while read -r var; do
            tf_var_flags+=(-var "${var:?}")
        done < <(jq -r 'to_entries[] | select(.value != null) | "\(.key)=\(.value | tostring)"' <<<"${required_vars_json}")

        tf_var_envs=()
        while read -r env; do
            tf_var_envs+=("${env:?}")
        done < <(jq -r 'to_entries[] | select(.value != null) | "TF_VAR_\(.key)=\(.value | tostring)"' <<<"${optional_vars_json}")

        echo "::group::terraform init"
        terraform init
        echo "::endgroup::"

        if [[ -n "$workspace" ]]; then
            # When the workspace doesn't exist then there are no resources to delete
            terraform workspace select "${workspace}" || exit 0
        fi

        echo "::group::terraform destroy"
        (set -x; env "${tf_var_envs[@]}" terraform destroy -auto-approve -lock="$lock" -input=false "${tf_var_flags[@]}")
        echo "::endgroup::"

        if [[ -n "$workspace" ]]; then
            # The "default" workspace always exists:
            # https://developer.hashicorp.com/terraform/language/state/workspaces#using-workspaces
            terraform workspace select default

            echo "::group::terraform workspace delete"
            terraform workspace delete "${workspace:?}"
            echo "::endgroup::"
        fi
      env:
        # Allow HTTPS token access to remote modules. Using environmental variables to
        # only temporarily modify the Git configuration.
        GIT_CONFIG_COUNT: "1"
        GIT_CONFIG_KEY_0: url.https://git:${{ inputs.token }}@github.com.insteadOf
        GIT_CONFIG_VALUE_0: https://github.com

        TF_LOG: ${{ inputs.log-level }}
        workspace: ${{ inputs.workspace }}
        lock: ${{ inputs.lock }}
        required_vars_json: ${{ steps.variables.outputs.required-json }}
        optional_vars_json: ${{ steps.variables.outputs.optional-json }}
      working-directory: ${{ inputs.dir }}
